@page "/"

@inject ITimeService timeService
@inject IProjectService projectService
@inject IJSRuntime js
@inject HttpInterceptorService Interceptor

@implements IDisposable

@attribute [Authorize]

<h3>Time</h3>

<br />

@if (projects == null)
{
    <text>Loading...</text>
}
else if (projects.Length == 0)
{
    <text>No Projects Found</text>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Code</th>
                <th>Title</th>
                <th>Description</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var project in projects)
            {
                <tr>
                    <td>@project.Code</td>
                    <td>@project.Title</td>
                    <td>@project.Description</td>
                    <td>
                        <a class="btn btn-success" href="time/tasks/@project.Id">Add Time</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <EditForm Model="@workDate">
        <DataAnnotationsValidator />
        <div class="form-group ">
            <div>
                <label>Date:</label>
                <div>
                    <InputDate ValueExpression="@(()=>workDate)" Value="@workDate" ValueChanged="@((DateTime value) => GetTimeSpent(value))" />
                    <ValidationMessage For="@(() => workDate)" />
                </div>
            </div>
        </div>
    </EditForm>
}
@if (times == null)
{
    <text>Loading...</text>
}
else if (times.Length == 0)
{
    <text>No Time Found</text>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Hours</th>
                <th>Location</th>
                <th>Comment</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var time in times)
            {
                <tr>
                    <td>@time.Hours</td>
                    <td>@time.Location</td>
                    <td>@time.Comment</td>
                    <td>
                        <a class="btn btn-warning" href="time/edit/@time.Id">Edit</a>
                        <button class="btn btn-danger" @onclick="@(() => DeleteTime(time.Id))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    ProjectDto[] projects { get; set; }
    VwTimeDto[] times { get; set; }
    DateTime workDate { get; set; }
    private string errorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Interceptor.RegisterEvent();
        projects = await projectService.Get();
        await GetTimeSpent(DateTime.Now);
    }

    private async Task GetTimeSpent(DateTime date)
    {
        workDate = date;
        using var response = await timeService.GetByDate(date);

        if (!response.IsSuccessStatusCode)
        {
            // set error message for display, log to console and return
            errorMessage = response.ReasonPhrase;
            Console.WriteLine($"There was an error! {errorMessage}");
            return;
        }

        times = await response.Content.ReadFromJsonAsync<VwTimeDto[]>();
    }

    private async Task DeleteTime(int Id)
    {
        if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete this time?"))
        {
            await timeService.Delete(Id);
            await GetTimeSpent(workDate);
        }
    }

    public void Dispose() => Interceptor.DisposeEvent();
}
