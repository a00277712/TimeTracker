@page "/project/tasks/{projectId}"

@inject ITaskService service
@inject IJSRuntime js
@inject HttpInterceptorService Interceptor

@implements IDisposable

@attribute [Authorize(Roles = "Setup")]

<h3>Tasks</h3>

<div class="form-group">
    <a class="btn btn-success" href="project/task/create/@projectId"><i class="oi oi-plus"></i>Create New</a>
</div>

<br />

@if (tasks == null)
{
    <text>Loading...</text>
}
else if (tasks.Length == 0)
{
    <text>No Records Found.</text>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Task No</th>
                <th>Title</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var task in tasks)
            {
                <tr>
                    <td>@task.TaskNo</td>
                    <td>@task.Title</td>
                    <td>
                        <a class="btn btn-success" href="tasks/edit/@task.Id">Edit</a>
                        <button class="btn btn-danger" @onclick="@(() => Delete(task.Id))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter] public string projectId { get; set; }
    private TaskDto[] tasks;

    protected override void OnInitialized()
    {
        Interceptor.RegisterEvent();
    }

    protected async override Task OnParametersSetAsync()
    {
        tasks = await service.GetByProjectId(projectId);
    }

    private async Task Delete(int Id)
    {
        var task = tasks.First(x => x.Id == Id);
        if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete task: {task.Title}?"))
        {
            await service.Delete(Id);
            tasks = await service.GetByProjectId(projectId);
        }
    }

    public void Dispose() => Interceptor.DisposeEvent();
}
